// Copyright 2023 Cisco Systems, Inc. and/or its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scale/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/banzaicloud/go-cruise-control/pkg/api"
	types "github.com/banzaicloud/go-cruise-control/pkg/types"
	scale "github.com/banzaicloud/koperator/pkg/scale"
)

// MockCruiseControlScaler is a mock of CruiseControlScaler interface.
type MockCruiseControlScaler struct {
	ctrl     *gomock.Controller
	recorder *MockCruiseControlScalerMockRecorder
}

// MockCruiseControlScalerMockRecorder is the mock recorder for MockCruiseControlScaler.
type MockCruiseControlScalerMockRecorder struct {
	mock *MockCruiseControlScaler
}

// NewMockCruiseControlScaler creates a new mock instance.
func NewMockCruiseControlScaler(ctrl *gomock.Controller) *MockCruiseControlScaler {
	mock := &MockCruiseControlScaler{ctrl: ctrl}
	mock.recorder = &MockCruiseControlScalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCruiseControlScaler) EXPECT() *MockCruiseControlScalerMockRecorder {
	return m.recorder
}

// AddBrokers mocks base method.
func (m *MockCruiseControlScaler) AddBrokers(brokerIDs ...string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range brokerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBrokers", varargs...)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBrokers indicates an expected call of AddBrokers.
func (mr *MockCruiseControlScalerMockRecorder) AddBrokers(brokerIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBrokers", reflect.TypeOf((*MockCruiseControlScaler)(nil).AddBrokers), brokerIDs...)
}

// AddBrokersWithParams mocks base method.
func (m *MockCruiseControlScaler) AddBrokersWithParams(params map[string]string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBrokersWithParams", params)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBrokersWithParams indicates an expected call of AddBrokersWithParams.
func (mr *MockCruiseControlScalerMockRecorder) AddBrokersWithParams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBrokersWithParams", reflect.TypeOf((*MockCruiseControlScaler)(nil).AddBrokersWithParams), params)
}

// BrokerWithLeastPartitionReplicas mocks base method.
func (m *MockCruiseControlScaler) BrokerWithLeastPartitionReplicas() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BrokerWithLeastPartitionReplicas")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrokerWithLeastPartitionReplicas indicates an expected call of BrokerWithLeastPartitionReplicas.
func (mr *MockCruiseControlScalerMockRecorder) BrokerWithLeastPartitionReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrokerWithLeastPartitionReplicas", reflect.TypeOf((*MockCruiseControlScaler)(nil).BrokerWithLeastPartitionReplicas))
}

// BrokersWithState mocks base method.
func (m *MockCruiseControlScaler) BrokersWithState(states ...scale.KafkaBrokerState) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range states {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BrokersWithState", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrokersWithState indicates an expected call of BrokersWithState.
func (mr *MockCruiseControlScalerMockRecorder) BrokersWithState(states ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrokersWithState", reflect.TypeOf((*MockCruiseControlScaler)(nil).BrokersWithState), states...)
}

// IsReady mocks base method.
func (m *MockCruiseControlScaler) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockCruiseControlScalerMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockCruiseControlScaler)(nil).IsReady))
}

// IsUp mocks base method.
func (m *MockCruiseControlScaler) IsUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUp indicates an expected call of IsUp.
func (mr *MockCruiseControlScalerMockRecorder) IsUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUp", reflect.TypeOf((*MockCruiseControlScaler)(nil).IsUp))
}

// KafkaClusterLoad mocks base method.
func (m *MockCruiseControlScaler) KafkaClusterLoad() (*api.KafkaClusterLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KafkaClusterLoad")
	ret0, _ := ret[0].(*api.KafkaClusterLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KafkaClusterLoad indicates an expected call of KafkaClusterLoad.
func (mr *MockCruiseControlScalerMockRecorder) KafkaClusterLoad() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaClusterLoad", reflect.TypeOf((*MockCruiseControlScaler)(nil).KafkaClusterLoad))
}

// KafkaClusterState mocks base method.
func (m *MockCruiseControlScaler) KafkaClusterState() (*types.KafkaClusterState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KafkaClusterState")
	ret0, _ := ret[0].(*types.KafkaClusterState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KafkaClusterState indicates an expected call of KafkaClusterState.
func (mr *MockCruiseControlScalerMockRecorder) KafkaClusterState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaClusterState", reflect.TypeOf((*MockCruiseControlScaler)(nil).KafkaClusterState))
}

// LogDirsByBroker mocks base method.
func (m *MockCruiseControlScaler) LogDirsByBroker() (map[string]map[scale.LogDirState][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDirsByBroker")
	ret0, _ := ret[0].(map[string]map[scale.LogDirState][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogDirsByBroker indicates an expected call of LogDirsByBroker.
func (mr *MockCruiseControlScalerMockRecorder) LogDirsByBroker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDirsByBroker", reflect.TypeOf((*MockCruiseControlScaler)(nil).LogDirsByBroker))
}

// PartitionReplicasByBroker mocks base method.
func (m *MockCruiseControlScaler) PartitionReplicasByBroker() (map[string]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionReplicasByBroker")
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionReplicasByBroker indicates an expected call of PartitionReplicasByBroker.
func (mr *MockCruiseControlScalerMockRecorder) PartitionReplicasByBroker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionReplicasByBroker", reflect.TypeOf((*MockCruiseControlScaler)(nil).PartitionReplicasByBroker))
}

// RebalanceDisks mocks base method.
func (m *MockCruiseControlScaler) RebalanceDisks(brokerIDs ...string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range brokerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebalanceDisks", varargs...)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebalanceDisks indicates an expected call of RebalanceDisks.
func (mr *MockCruiseControlScalerMockRecorder) RebalanceDisks(brokerIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebalanceDisks", reflect.TypeOf((*MockCruiseControlScaler)(nil).RebalanceDisks), brokerIDs...)
}

// RebalanceWithParams mocks base method.
func (m *MockCruiseControlScaler) RebalanceWithParams(params map[string]string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebalanceWithParams", params)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebalanceWithParams indicates an expected call of RebalanceWithParams.
func (mr *MockCruiseControlScalerMockRecorder) RebalanceWithParams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebalanceWithParams", reflect.TypeOf((*MockCruiseControlScaler)(nil).RebalanceWithParams), params)
}

// RemoveBrokers mocks base method.
func (m *MockCruiseControlScaler) RemoveBrokers(brokerIDs ...string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range brokerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBrokers", varargs...)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBrokers indicates an expected call of RemoveBrokers.
func (mr *MockCruiseControlScalerMockRecorder) RemoveBrokers(brokerIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBrokers", reflect.TypeOf((*MockCruiseControlScaler)(nil).RemoveBrokers), brokerIDs...)
}

// RemoveBrokersWithParams mocks base method.
func (m *MockCruiseControlScaler) RemoveBrokersWithParams(params map[string]string) (*scale.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBrokersWithParams", params)
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBrokersWithParams indicates an expected call of RemoveBrokersWithParams.
func (mr *MockCruiseControlScalerMockRecorder) RemoveBrokersWithParams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBrokersWithParams", reflect.TypeOf((*MockCruiseControlScaler)(nil).RemoveBrokersWithParams), params)
}

// Status mocks base method.
func (m *MockCruiseControlScaler) Status() (scale.CruiseControlStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(scale.CruiseControlStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockCruiseControlScalerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockCruiseControlScaler)(nil).Status))
}

// StopExecution mocks base method.
func (m *MockCruiseControlScaler) StopExecution() (*scale.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExecution")
	ret0, _ := ret[0].(*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExecution indicates an expected call of StopExecution.
func (mr *MockCruiseControlScalerMockRecorder) StopExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecution", reflect.TypeOf((*MockCruiseControlScaler)(nil).StopExecution))
}

// UserTasks mocks base method.
func (m *MockCruiseControlScaler) UserTasks(taskIDs ...string) ([]*scale.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range taskIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserTasks", varargs...)
	ret0, _ := ret[0].([]*scale.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTasks indicates an expected call of UserTasks.
func (mr *MockCruiseControlScalerMockRecorder) UserTasks(taskIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTasks", reflect.TypeOf((*MockCruiseControlScaler)(nil).UserTasks), taskIDs...)
}
